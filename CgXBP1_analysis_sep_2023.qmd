---
title: "CgXBP1_analysis"
format: html
editor: visual
---

```{r setup}

library(magrittr)

```

## PolII profile plot

```{r}


gff_file <- "../../../1_genome/CBS138_s02-m07-r06/annotation/C_glabrata_CBS138_version_s02-m07-r06_features.gff"
gff <- GenomicFeatures::makeTxDbFromGFF(gff_file, metadata = T)
genes <- GenomicFeatures::genes(gff)

## prepare signal data

#bw_files_dir <- c("../../../2_fastq_and_alignment/xbp1_deletion/180518_D00691_0103_BCCHBVANXX/")

bw_files_dir <- c("../../../2_fastq_and_alignment/WT/2_new_analysis/2_alignment/THP1/set1/")

# bw_files_dir <- c("../../../2_fastq_and_alignment/WT/2_new_analysis/2_alignment/THP1/set2_normalised_bw/reseq/")

bw_files <- list.files(bw_files_dir, pattern = "*set1.*bw", recursive = T, full.names = T)

names(bw_files) <- c("0.5h", "2h", "4h", "6h", "8h")
bw_files <- tibble::enframe(bw_files)

## generate normalised matrix in tidy way
xx <- bw_files %>%
        dplyr::mutate(bw = purrr::map(value, function(ii) {
                rtracklayer::import(ii)
        })) %>%
        dplyr::mutate(norm_matrix = purrr::map(bw, function(ii) {
                nn <- EnrichedHeatmap::normalizeToMatrix(signal = ii, target = genes, value_column = "score", smooth = T, extend = 200)
                return(nn)
        }))

## plot hm list
hh <- get_enrichment_heatmap_list(
        x = xx$norm_matrix,
        col = circlize::colorRamp2(breaks = seq(0, 50, by = 10), colors = c("white", "#fdd49e", "#fdbb84", "#fc8d59", "#e34a33", "#b30000")),
        names = xx$name,
        titles = xx$name,
        axis_name = c("-200", "TSS", "TES", "+200"),
        axis_name_rot = 90 ,
        axis_name_gp = gpar(fontsize = 10, fontface = "bold"),
        pos_line = T,
        top_annotation = HeatmapAnnotation(lines = anno_enriched(axis_param = list(side = "right", facing = "inside")))
)

ComplexHeatmap::draw(hh)




```

## Heatmap of temporal expression patterns of transcribed genes in *C. glabrata* 

```{r}

# load FPKM matrix 

load("cg_polII_wt_thp1_sample_wise_fpkm_mat.RData") ## WT data

cg_wt_tidy <- sample_wise_fpkm_mat_final
rm(sample_wise_fpkm_mat_final)

cg_wt_tidy <- cg_wt_tidy %>%
        dplyr::rename_if(is.numeric, ~gsub(pattern = "set_1", replacement = "set1", x = .)) %>% ## rename columns : set_1 to set1
        tidyr::gather("Cond", "FPKM", -geneName) %>%
        tidyr::separate(col = "Cond", sep = "_", into = c("organism", "strain", "condition", "timepoint", "moleculeType", "replicate"))



load("cg_polII_xbp1_thp1_sample_wise_fpkm_mat.RData") ## xbp1 del data

cg_xbp1_tidy <- sample_wise_fpkm_mat_final
cg_xbp1_tidy <- cg_xbp1_tidy %>%
        tidyr::gather("Cond", "FPKM", -geneName) %>%
        tidyr::separate(col = "Cond", sep = "_", into = c("organism", "strain", "condition", "timepoint", "moleculeType", "replicate"))


## combine datasets
cg_polII_data <- bind_rows(cg_wt_tidy, cg_xbp1_tidy) %>%
        dplyr::group_by(geneName, strain, condition, replicate) %>%
        dplyr::mutate(stdev = sd(FPKM)) ## calculate sd within group across all timepoints . Make sure that number of elem in each group must be equal to time points.

dplyr::bind_rows(cg_wt_tidy, cg_xbp1_tidy) %>% dplyr::group_by(geneName, strain, condition, replicate) %>% tally() %>% arrange(desc(n))


## cross check the numbers (e.g number of unique genes, organism , strain, conditions etc.)
cg_polII_data %>% ungroup() %>% summarise_all(dplyr::n_distinct)


```

## plot SD distributions for strain types for each replicates.

```{r}


gp <- cg_polII_data %>%
        dplyr::slice(1L) %>% ## get one elem of each group
        ggplot() + geom_histogram(aes(x = stdev), binwidth = 1, fill = "cyan3", col = "black") + xlim(-1, 50) + facet_wrap(replicate ~ strain) + theme_bw()

gp


```

## Count number of genes at several standard deviation cutoffs (WT)

```{r}

gp <- counts_by_sd_cutoffs(
        x = cg_wt_tidy %>%
                tidyr::spread(timepoint, FPKM) %>%
                dplyr::filter(replicate == "set1") %>%
                dplyr::select_if(is.double),
        y = paste(c(0, 2, 4, 6, 8), "h", sep = ""),
        sds_cutoffs = seq(1, 10, by = 0.5)
)

gp + theme_bw()
```

## zscore heatmap plot

```{r, fig.width=4, fig.height=8}

## @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
####  zscore heatmap plot
## @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

sd_cut_off <- 2.25
strain_type <- "wt"
rep <- "set1"
fpkm_mat <- cg_polII_data %>%
        dplyr::ungroup() %>%
        dplyr::filter(strain == strain_type, stdev >= sd_cut_off, replicate == rep) %>%
        dplyr::select(geneName, strain, timepoint, FPKM) %>%
        tidyr::unite(col = "ident", sep = "_", strain, timepoint) %>%
        dplyr::group_by(geneName)

zscore_mat <- fpkm_mat  %>%
        dplyr::group_by(geneName) %>% 
        dplyr::mutate(zscore = scale(FPKM)) %>% 
        dplyr::select(-FPKM) %>% 
        tidyr::spread(key = ident, value = zscore) %>%
        TidyWrappers::tbl_remove_rows_NA_any()

hm_data <- zscore_mat %>% 
        as.data.frame() %>% 
        tibble::column_to_rownames("geneName")

# seed <- sample(1:10000,1)
seed <- 7173
set.seed(seed)
km <- kmeans(hm_data, centers = 8)
table(km$cluster)
cl_order <- factor(km$cluster, levels = c(4,2,3,8,6,1,7,5))
ComplexHeatmap::Heatmap(hm_data, show_row_dend = F, show_row_names = F, cluster_columns = F, show_column_dend = F, row_split = km$cluster, cluster_row_slices = F)

```
